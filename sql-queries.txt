# 1. Revising the Select Query I

select * from CITY where POPULATION > 100000 and COUNTRYCODE = "USA"

# 2. Revising the Select Query II

select NAME from CITY where POPULATION > 120000 and COUNTRYCODE ="USA"

# 3. Select All

select * from CITY

# 4. Select By ID

select * from CITY where ID = 1661

# 5. Japanese Cities' Attributes

select * from CITY where COUNTRYCODE = "JPN"

# 6. Japanese Cities' Names

select name from CITY where COUNTRYCODE = "JPN"

# 7. Weather Observation Station 1

select CITY, STATE from STATION

# 8. Weather Observation Station 3

select distinct CITY from STATION where ID=IF(ID%2=0, ID, NULL)

#9. Weather Observation Station 4

select count(CITY) - count(distinct CITY) from STATION

# 10. Weather Observation Station 5 (DB2)

select CITY,LENGTH(CITY) from STATION order by Length(CITY) asc, CITY limit 1; 
select CITY,LENGTH(CITY) from STATION order by Length(CITY) desc, CITY limit 1; 

# 11. Weather Observation Station 6

select distinct CITY from STATION where CITY like '[aeiou]%'

# 12. Weather Observation Station 7

select distinct CITY from STATION where CITY like '%[aeiou]'

# 13. Weather Observation Station 8

select distinct CITY from STATION where CITY like '[aeiou]%[aeiou]'

# 14. Weather Observation Station 9

select distinct CITY from STATION where CITY NOT like '[aeiou]%'

# 15. Weather Observation Station 10

select distinct CITY from STATION where CITY NOT like '%[aeiou]'

# 16. Weather Observation Station 11

select distinct CITY from STATION where CITY NOT like '[aeiou]%[aeiou]'

# 17. Weather Observation Station 12

select distinct CITY from STATION where CITY not like '[aeiou]%' and CITY not like '%[aeiou]'

# 18. Higher Than 75 Marks

select Name from STUDENTS where Marks > 75 order by Right(Name, 3), ID

# 19. Employee Names

select name from Employee order by name

# 20. Employee Salaries

select name from Employee where salary > 2000 and months < 10 order by employee_id

# 21. Weather Observation Station 15

SELECT ROUND(LONG_W, 4) FROM STATION WHERE LAT_N = (SELECT MAX(LAT_N) FROM STATION WHERE LAT_N < 137.2345)

# 22. Weather Observation Station 16

SELECT ROUND(LAT_N, 4) FROM STATION WHERE LAT_N = (SELECT MIN(LAT_N) FROM STATION WHERE LAT_N > 38.7780)

# 23. Weather Observation Station 17

SELECT ROUND(LONG_W, 4) FROM STATION WHERE LAT_N = (SELECT MIN(LAT_N) FROM STATION WHERE LAT_N >38.7780)

# 24. Weather Observation Station 18

select ROUND(abs(min(LAT_N) - MAX(LAT_N)) + abs(min(LONG_W) - MAX(LONG_W)), 4) from STATION 

# 25. Weather Observation Station 19

select ROUND(sqrt(pow(abs(min(LAT_N) - MAX(LAT_N)),2) + pow(abs(min(LONG_W) - MAX(LONG_W)),2)), 4) from STATION 

# 26. Weather Observation Station 20 (Oracle)

select round(median(LAT_N),4) from STATION

# 27. Top Earners

SELECT (SALARY*MONTHS)AS MAX_SALARY, COUNT(EMPLOYEE_ID) FROM EMPLOYEE WHERE (SALARY*MONTHS) = (SELECT MAX(SALARY*MONTHS) FROM EMPLOYEE) GROUP BY 1;

# 28. Weather Observation Station 2

select round(sum(LAT_N), 2), round(sum(LONG_W), 2) from STATION;

# 29. Weather Observation Station 13

select round(sum(LAT_N), 4) from STATION where LAT_N > 38.7880 and LAT_N < 137.2345

# 30. Weather Observation Station 14

select round(max(LAT_N),4) from STATION where LAT_N < 137.2345

# 31. Draw The Triangle 1 (MS SQL)

Declare @i int = 22
while(@i > 0)
BEGIN
    print  REPLICATE("* ", @i)
    set @i = @i - 1
END

# 32. Draw The Triangle 2 (MS SQL)

DECLARE @i INT = 1
while (@i <23)
BEGIN
    PRINT replicate("* ", @i-2)
    set @i = @i + 1
END

# 33. Type of Triangle

select
    if(A + B <= C OR A + C <= B OR B + C <= A, 'Not A Triangle',
    IF(A = B and B = C, 'Equilateral',
    IF(A = B OR A = C or B = C, 'Isosceles', 'Scalene')
    )
    ) as Type from Triangles

# 34. The PADS

Select concat(Name,'(',Left(Occupation, 1), ')') as nms from Occupations
UNION ALL
select concat('There are a total of ', count(Occupation), ' ', lower(Occupation) ,if(count(distinct Occupation), 's.', NULL)) as occ from Occupations group by Occupation order by nms;

#35. New Companies

SELECT Company.company_code,Company.founder,COUNT(DISTINCT Employee.lead_manager_code),COUNT(DISTINCT Employee.senior_manager_code), COUNT(DISTINCT Employee.manager_code), COUNT(DISTINCT Employee.employee_code) FROM Company INNER JOIN Employee ON Company.company_code = Employee.company_code GROUP BY Company.company_code,Company.founder ORDER BY Company.company_code ASC;

#36. Revising Aggregations - The Count Function

select count(ID) from CITY where POPULATION > 100000

# 37. Revising Aggregations - The Sum Function

select sum(POPULATION) from CITY where DISTRICT = 'California'

# 38. Revising Aggregations - Averages

select avg(POPULATION) from CITY where DISTRICT = 'California'

# 39. Average Population

select floor(avg(POPULATION)) from CITY 

# 40. Japan Population

select sum(POPULATION) from CITY where COUNTRYCODE  = 'JPN'

# 41. Population Density Difference

select Max(POPULATION) - MIN(POPULATION) from CITY

# 42. The Blunder

select ceil(avg(salary) - avg(replace(salary, '0', ''))) from EMPLOYEES

# 43. Population Census

select sum(CITY.POPULATION) from CITY INNER JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code where COUNTRY.CONTINENT = 'Asia'

# 44. African Cities

select CITY.NAME from CITY INNER JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code where COUNTRY.CONTINENT = 'Africa'

# 45. Average Population of Each Continent

select COUNTRY.Continent, floor(avg(CITY.Population))  from CITY INNER JOIN COUNTRY ON CITY.CountryCode = COUNTRY.Code group by 1

# 46. The Report

SELECT (CASE
        WHEN Grade < 8 THEN 'NULL' ELSE Students.Name END) AS Name, Grade, Marks
FROM Students, Grades
WHERE Students.Marks BETWEEN Grades.Min_Mark AND Grades.Max_Mark
ORDER BY Grade DESC, Name, Marks

# 47. Top Competitors

select h.hacker_id, h.name
from hackers h
join submissions s on s.hacker_id = h.hacker_id
join challenges c on c.challenge_id = s.challenge_id
join difficulty d on (
    d.difficulty_level = c.difficulty_level and
    d.score = s.score
)
group by h.hacker_id, h.name
having count(*) > 1
order by count(*) desc, h.hacker_id asc

# 48. Placements

select students.name from students
join Friends on Friends.id = Students.id
join Packages sp on sp.id = Students.id 
join Packages fp on fp.id = Friends.Friend_ID
where fp.salary > sp.salary
order by fp.salary
;

# 49.

# 50. 

# 51.

# 52.

# 53.

# 54.

# 55.

# 56.

# 57.

# 58.